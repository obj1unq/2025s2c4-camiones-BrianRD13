import camion.*
import cosas.*

describe "Carga y Descarga" {
  test "Cargar Bumblebee y verificar si esta solo" {
    camion.cargar(bumblebee)
    assert.equals(#{bumblebee}, camion.cosas())
    }

  test "Cargar Knight Rider y verificar si estan ambos" {
    camion.cargar(bumblebee)
    // Ya esta cargado Bumblebee

    camion.cargar(knightRider)
    assert.equals(#{bumblebee, knightRider}, camion.cosas())
  }

  test "Descargar Bumblebee y verificar si esta solo Knight Rider" {
    camion.cargar(bumblebee)
    camion.cargar(knightRider)
    // Ya estan cargados Bumblebee y Knight Rider

    camion.descargar(bumblebee)
    assert.equals(#{knightRider}, camion.cosas())
  }

  test "Cargar Knight Rider y descargar Bumblebee, verificando que ambas operaciones fallen" {
    camion.cargar(knightRider)
    // Ya esta cargado knightRider
    
    assert.throwsException({ camion.cargar(knightRider) })
    assert.throwsException({ camion.descargar(bumblebee) })
  }
}

describe "Todo peso par" {
  test "Un camion cargado con Bumblebee y 50 kg de arena a granel deberia ser par" {
    arenaAGranel.cambiarPeso(50)
    camion.cargar(bumblebee)
    camion.cargar(arenaAGranel)

    assert.that(camion.todoPesoPar())
  }

  test "En cambio, si la arena a granel pesa 51 kg entonces no" {
    arenaAGranel.cambiarPeso(51)
    camion.cargar(bumblebee)
    camion.cargar(arenaAGranel)

    assert.notThat(camion.todoPesoPar())    
  }
}

describe "Hay alguno que pesa" {
  method initialize() {
    arenaAGranel.cambiarPeso(50)
    camion.cargar(bumblebee)
    camion.cargar(arenaAGranel)
  }
  test "Se carga a Bumblebee y 50 kg de arena a granel, luego se pregunta por 50 kg y debe dar verdadero" {
    camion.initialize()
    assert.that(camion.objetoConPeso(50))
  }

  test "Se pregunta por 800 kg y debe dar verdadero, debido a Bumblebee" {
    camion.initialize()
    assert.that(camion.objetoConPeso(800))
  }

  test "Se pregunta por 500 kg y debe dar falso" {
    camion.initialize()
    assert.notThat(camion.objetoConPeso(500))
  }
}

describe "Peso y exceso de peso" {
  test "Si el camion tiene a Bumblebee y un paquete de 300 ladrillos, entonces el peso total es 2400 y no está excedido de peso" {
    camion.cargar(bumblebee)
    paqueteDeLadrillos.agregarLadrillos(300)
    camion.cargar(paqueteDeLadrillos)

    assert.equals(2400, camion.peso())
    assert.notThat(camion.excedidoDePeso())
  }

  test "Pero si el paquete de ladrillos contiene 400 ladrillos, entonces el peso total es 2600 y sí está excedido" {
    camion.cargar(bumblebee)
    paqueteDeLadrillos.agregarLadrillos(400)
    camion.cargar(paqueteDeLadrillos)

    assert.equals(2600, camion.peso())
    assert.that(camion.excedidoDePeso())
  }
}

describe "El de nivel" {
  method initialize() {
    camion.cargar(bumblebee) // modo auto
    camion.cargar(bateriaAntiaerea) // descargada
    camion.cargar(residuosRadiactivos)
  }

  test "Para un camión cargado con Bumblebee en modo auto, la batería antiaérea descargada y los residuos radiactivos, si se pide algo de nivel 0 debe encontrar a la batería antiaérea" {
    camion.initialize()
    assert.equals(bateriaAntiaerea, camion.objetoConPeligrosidad(0))
  }

  test "Si se pide algo de nivel 15 debe encontrar a Bumblebee" {
    camion.initialize()
    assert.equals(bumblebee, camion.objetoConPeligrosidad(15))
    
  }

  test "Si se pide algo de nivel 200 debe encontrar a los residuos" {
    camion.initialize()
    assert.equals(residuosRadiactivos, camion.objetoConPeligrosidad(200))
  }

  test "Si se pide algo de nivel 30 debe romper, porque no se encuentra nada" {
    camion.initialize()
    assert.throwsException({ camion.objetoConPeligrosidad(30) })
  }

  test "Si se cambia a Bumblebee a modo robot y se vuelve a pedir algo de 30, entonces encuentra a Bumblebee" {
    camion.initialize()
    bumblebee.transformarse() // modo robot
    assert.equals(bumblebee, camion.objetoConPeligrosidad(30))
  }

  test "Si se carga la batería con misiles y se pide algo de peligrosidad 100 entonces encuentra a la batería" {
    camion.initialize()
    bateriaAntiaerea.cambiarEstado() // con misiles
    assert.equals(bateriaAntiaerea, camion.objetoConPeligrosidad(100))
  }
}